{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Misha\\\\source\\\\repos\\\\5 semester\\\\WEB\\\\lab4_client\\\\src\\\\components\\\\Menu Components\\\\DatePlate\\\\DatePlate.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport classes from \"./DatePlate.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatePlate = () => {\n  _s();\n  const [currentDateTime, setCurrentDateTime] = useState(null);\n  const [userTimeZone, setUserTimeZone] = useState(null);\n  useEffect(() => {\n    const fetchData = () => {\n      // Get the current date and time\n      const now = new Date();\n\n      // Get the user's time zone\n      const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n      // Format the date and time\n      const formattedDateTime = new Intl.DateTimeFormat('en-US', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        // timeZoneName: 'short',\n        hour12: false // Display hours in 24-hour format\n      }).format(now);\n\n      // Update state\n      setCurrentDateTime(formattedDateTime);\n      setUserTimeZone(timeZone);\n    };\n\n    // Fetch data initially\n    fetchData();\n\n    // Set up an interval to update the data every second\n    const intervalId = setInterval(fetchData, 1000);\n\n    // Clean up the interval when the component is unmounted\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array ensures the effect runs only once, when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.datePlate,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Current Date and Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), currentDateTime && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: currentDateTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"User Time Zone: \", userTimeZone]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(DatePlate, \"m6ygbeCGWE0LKP2pK+uuBHj+7Ko=\");\n_c = DatePlate;\nexport default DatePlate;\nvar _c;\n$RefreshReg$(_c, \"DatePlate\");","map":{"version":3,"names":["React","useState","useEffect","classes","jsxDEV","_jsxDEV","DatePlate","_s","currentDateTime","setCurrentDateTime","userTimeZone","setUserTimeZone","fetchData","now","Date","timeZone","Intl","DateTimeFormat","resolvedOptions","formattedDateTime","weekday","year","month","day","hour","minute","second","hour12","format","intervalId","setInterval","clearInterval","className","datePlate","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Misha/source/repos/5 semester/WEB/lab4_client/src/components/Menu Components/DatePlate/DatePlate.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport classes from \"./DatePlate.module.css\";\r\nconst DatePlate = () => {\r\n    const [currentDateTime, setCurrentDateTime] = useState(null);\r\n    const [userTimeZone, setUserTimeZone] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = () => {\r\n            // Get the current date and time\r\n            const now = new Date();\r\n\r\n            // Get the user's time zone\r\n            const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\r\n            // Format the date and time\r\n            const formattedDateTime = new Intl.DateTimeFormat('en-US', {\r\n                weekday: 'long',\r\n                year: 'numeric',\r\n                month: 'long',\r\n                day: 'numeric',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit',\r\n                // timeZoneName: 'short',\r\n                hour12: false, // Display hours in 24-hour format\r\n            }).format(now);\r\n\r\n            // Update state\r\n            setCurrentDateTime(formattedDateTime);\r\n            setUserTimeZone(timeZone);\r\n        };\r\n\r\n        // Fetch data initially\r\n        fetchData();\r\n\r\n        // Set up an interval to update the data every second\r\n        const intervalId = setInterval(fetchData, 1000);\r\n\r\n        // Clean up the interval when the component is unmounted\r\n        return () => clearInterval(intervalId);\r\n\r\n    }, []); // Empty dependency array ensures the effect runs only once, when the component mounts\r\n\r\n    return (\r\n        <div className={classes.datePlate}>\r\n            <label>Current Date and Time</label>\r\n            {currentDateTime && (\r\n                <div>\r\n                    <label>{currentDateTime}</label>\r\n                    <label>User Time Zone: {userTimeZone}</label>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DatePlate;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC7C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACZ,MAAMU,SAAS,GAAGA,CAAA,KAAM;MACpB;MACA,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;;MAEtB;MACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACH,QAAQ;;MAEjE;MACA,MAAMI,iBAAiB,GAAG,IAAIH,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;QACvDG,OAAO,EAAE,MAAM;QACfC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,MAAM;QACbC,GAAG,EAAE,SAAS;QACdC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,SAAS;QACjBC,MAAM,EAAE,SAAS;QACjB;QACAC,MAAM,EAAE,KAAK,CAAE;MACnB,CAAC,CAAC,CAACC,MAAM,CAACf,GAAG,CAAC;;MAEd;MACAJ,kBAAkB,CAACU,iBAAiB,CAAC;MACrCR,eAAe,CAACI,QAAQ,CAAC;IAC7B,CAAC;;IAED;IACAH,SAAS,CAAC,CAAC;;IAEX;IACA,MAAMiB,UAAU,GAAGC,WAAW,CAAClB,SAAS,EAAE,IAAI,CAAC;;IAE/C;IACA,OAAO,MAAMmB,aAAa,CAACF,UAAU,CAAC;EAE1C,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIxB,OAAA;IAAK2B,SAAS,EAAE7B,OAAO,CAAC8B,SAAU;IAAAC,QAAA,gBAC9B7B,OAAA;MAAA6B,QAAA,EAAO;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,EACnC9B,eAAe,iBACZH,OAAA;MAAA6B,QAAA,gBACI7B,OAAA;QAAA6B,QAAA,EAAQ1B;MAAe;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChCjC,OAAA;QAAA6B,QAAA,GAAO,kBAAgB,EAACxB,YAAY;MAAA;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC/B,EAAA,CApDID,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AAsDf,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}